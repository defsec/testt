// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

import "forge-std/Test.sol";
import "../src/accounts/PortfolioFactory.sol";
import "../src/storage/CollateralStorage.sol";
import "../src/accounts/FacetRegistry.sol";

contract AccountStorageSimplifiedTest is Test {
    PortfolioFactory public PortfolioFactory;
    address public owner = address(0x1);
    address public factory = address(0x2);
    address public user = address(0x3);
    address public account = address(0x4);

    function setUp() public {
        vm.prank(owner);
        CollateralStorage collateralStorage = new CollateralStorage();
        FacetRegistry facetRegistry = new FacetRegistry();
        PortfolioFactory = new PortfolioFactory(address(CollateralStorage), address(facetRegistry));
        
        // Factory doesn't need authorization
    }

    function testCreateAccount() public {
        // Test account creation
        vm.prank(factory);
        PortfolioFactory.createAccount(user);
        
        // Check account exists
        assertTrue(PortfolioFactory.isUserAccount(account));
        assertEq(PortfolioFactory.getAccountOwner(account), user);
        assertEq(PortfolioFactory.getUserAccount(user), account);
    }

    function testAccountAlreadyExists() public {
        // Create first account
        vm.prank(factory);
        PortfolioFactory.createAccount(user);
        
        // Try to create duplicate
        vm.prank(factory);
        vm.expectRevert();
        PortfolioFactory.createAccount(user);
    }

    function testOnlyAuthorizedFactory() public {
        // Try to create account without authorization
        vm.prank(user);
        vm.expectRevert();
        PortfolioFactory.createAccount(user);
    }

    function testAccountDoesNotExist() public {
        // Try to get owner of non-existent account
        vm.expectRevert();
        PortfolioFactory.getAccountOwner(account);
    }

    function testisUserAccount() public {
        // Account doesn't exist initially
        assertFalse(PortfolioFactory.isUserAccount(account));
        
        // Create account
        vm.prank(factory);
        PortfolioFactory.createAccount(user);
        
        // Account now exists
        assertTrue(PortfolioFactory.isUserAccount(account));
    }
}
